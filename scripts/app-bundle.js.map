{"version":3,"sources":["../src/app.ts","../src/app.html","../src/environment.ts","../src/helpers.ts","../src/main.ts","../src/models/banter-model.ts","../src/models/cpu-model.ts","../src/models/player-model.ts","../src/models/settings-model.ts","../src/pages/game.ts","../src/pages/game.css","../src/pages/game.html","../src/pages/home.ts","../src/pages/home.html","../src/pages/message-test.ts","../src/pages/message-test.html","../src/resources/index.ts","../src/resources/phaser-game/phaser-game.ts","../src/resources/value-converters/integer-array-value-converter.ts","../src/resources/value-converters/integer-value-converter.ts","../src/resources/value-converters/json-value-converter.ts","../src/scenes/cyberball.ts"],"names":[],"mappings":";;;IAEA;QAAA;QAcA,CAAC;QAXG,6BAAe,GAAf,UAAgB,MAA2B,EAAE,MAAc;YACvD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YAErB,MAAM,CAAC,KAAK,GAAG,WAAW,CAAC;YAE3B,MAAM,CAAC,GAAG,CAAC;gBACP,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE;gBAC7D,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE;gBACvD,EAAE,KAAK,EAAE,cAAc,EAAE,IAAI,EAAE,cAAc,EAAE,QAAQ,EAAE,oBAAoB,EAAE;aAClF,CAAC,CAAC;QACP,CAAC;QACL,UAAC;IAAD,CAdA,AAcC,IAAA;IAdY,kBAAG;;;ACFhB;;;;ICAA,kBAAe;QACb,KAAK,EAAE,IAAI;QACX,OAAO,EAAE,IAAI;KACd,CAAC;;;;;;ICHF,SAAgB,qBAAqB,CAAC,MAAiC;QACnE,OAAO,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC;IACzE,CAAC;IAFD,sDAEC;IAED,SAAgB,qBAAqB,CAAC,MAAiC;QACnE,OAAO,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC;IACzE,CAAC;IAFD,sDAEC;;;;;;;;;;ICHD,SAAgB,SAAS,CAAC,OAAgB;QACxC,OAAO,CAAC,GAAG;aACR,qBAAqB,EAAE;aACvB,OAAO,CAAC,WAAW,CAAC,CAAC;QAExB,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,qBAAW,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;QAErE,IAAI,qBAAW,CAAC,OAAO,EAAE;YACvB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;SACvC;QAED,OAAO,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,cAAM,OAAA,OAAO,CAAC,OAAO,EAAE,EAAjB,CAAiB,CAAC,CAAC;IAChD,CAAC;IAZD,8BAYC;;;;;;ICfD;QAAA;QAKA,CAAC;QAAD,kBAAC;IAAD,CALA,AAKC,IAAA;IALY,kCAAW;;;;;;;;;;;;;;;;;;;ICGxB;QAA8B,4BAAW;QAkBrC,kBAAY,IAAwB;YAApC,YACI,iBAAO,SAGV;YApBD,sBAAgB,GAAkB,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;YAE3C,gBAAU,GAAW,GAAG,CAAC;YACzB,wBAAkB,GAAW,GAAG,CAAC;YAEjC,gBAAU,GAAW,GAAG,CAAC;YACzB,wBAAkB,GAAW,GAAG,CAAC;YAa7B,MAAM,CAAC,MAAM,CAAC,KAAI,EAAE,IAAI,CAAC,CAAC;;QAC9B,CAAC;QACL,eAAC;IAAD,CAvBA,AAuBC,CAvB6B,0BAAW,GAuBxC;IAvBY,4BAAQ;;;;;;ICHrB;QAAA;QAGA,CAAC;QAAD,kBAAC;IAAD,CAHA,AAGC,IAAA;IAHY,kCAAW;;;;;;ICGxB;QAsBI,uBAAY,IAA6B;YArBzC,WAAM,GAAgB,IAAI,0BAAW,EAAE,CAAC;YAIxC,eAAU,GAAW,EAAE,CAAC;YACxB,cAAS,GAAW,GAAG,CAAC;YAExB,gBAAW,GAAY,KAAK,CAAC;YAC7B,6BAAwB,GAAY,KAAK,CAAC;YAC1C,aAAQ,GAAkB;gBACtB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;aACrC,CAAC;YAGF,YAAO,GAAW,UAAU,CAAC;YAC7B,eAAU,GAAW,UAAU,CAAC;YAIhC,gBAAW,GAAY,KAAK,CAAC;YAGzB,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC9B,CAAC;QACL,oBAAC;IAAD,CAzBA,AAyBC,IAAA;IAzBY,sCAAa;IA2Bb,QAAA,eAAe,GAAG,IAAI,aAAa,CAAC;QAC7C,MAAM,EAAE;YACL,IAAI,EAAE,UAAU;SAClB;QACD,eAAe,EAAE;YACb,IAAI,oBAAQ,CAAC;gBACT,IAAI,EAAE,UAAU;aACnB,CAAC;YACF,IAAI,oBAAQ,CAAC;gBACT,IAAI,EAAE,UAAU;aACnB,CAAC;SACL;KACJ,CAAC,CAAC;;;;;;;;;;IClCH;QAAA;YACI,aAAQ,GAAkB,gCAAe,CAAC;YAI1C,cAAS,GAAG,GAAG,CAAC;YAChB,eAAU,GAAG,GAAG,CAAC;YA6BjB,iBAAY,GAA0C,EAAE,CAAC;QAU7D,CAAC;QAnCG,gCAAQ,GAAR,UAAS,MAAM;YACX,IAAG,UAAU,IAAI,MAAM,EAAE;gBACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,8BAAa,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;aACxE;YAED,IAAG,YAAY,IAAI,MAAM,EAAE;gBACvB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC;aACjD;QACL,CAAC;QAED,4BAAI,GAAJ;YACI,IAAI,CAAC,UAAU,GAAI;gBACf,IAAI,EAAE,gBAAM,CAAC,IAAI;gBACjB,KAAK,EAAE,IAAI,CAAC,SAAS;gBACrB,MAAM,EAAE,IAAI,CAAC,UAAU;gBACvB,KAAK,EAAE,IAAI,0BAAc,CAAC,IAAI,CAAC,QAAQ,CAAC;gBACxC,OAAO,EAAE;oBACL,OAAO,EAAE,QAAQ;iBACpB;aACJ,CAAC;QACN,CAAC;QAOD,mCAAW,GAAX;YACI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;gBACnB,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI;gBACjC,IAAI,EAAE,IAAI,CAAC,WAAW;aACzB,CAAC,CAAC;YAEH,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QAC1B,CAAC;QACL,oBAAC;IAAD,CA7CA,AA6CC,IAAA;IA7CY,sCAAa;;;ACR1B;ACAA;;;;;;;;;;;;;;;;;ICOA;QAII,uBAAoB,QAAyB;YAAzB,aAAQ,GAAR,QAAQ,CAAiB;YAH7C,aAAQ,GAAkB,gCAAe,CAAC;QAGM,CAAC;QAEjD,4BAAI,GAAJ;YACI,IAAI,CAAC,SAAS,GAAG,IAAI,mBAAW,CAAC,OAAO,CAAC,CAAC;QAC9C,CAAC;QAED,8BAAM,GAAN;YACI,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;QAC7B,CAAC;QAED,8BAAM,GAAN;YAAA,iBASC;YARG,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,oBAAQ,CAAC;gBAC5C,IAAI,EAAE,aAAU,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAE;aAC7D,CAAC,CAAC,CAAC;YAEJ,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,UAAA,GAAG;gBACrC,OAAM,GAAG,CAAC,gBAAgB,CAAC,MAAM,IAAI,KAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,MAAM;oBACrE,GAAG,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC;QACP,CAAC;QAED,iCAAS,GAAT;YACI,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC;YAEpC,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,UAAA,GAAG;gBACrC,GAAG,CAAC,gBAAgB,CAAC,GAAG,EAAE,CAAC;YAC/B,CAAC,CAAC,CAAC;QACP,CAAC;QAED,oCAAY,GAAZ;YACI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QAC1C,CAAC;QAED,sBAAI,8BAAG;iBAAP;gBACI,IAAI,GAAG,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC;gBAEhE,GAAG,IAAI,iBAAiB,CAAC;gBACzB,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAE3C,OAAO,GAAG,CAAC;YACf,CAAC;;;WAAA;QAED,gCAAQ,GAAR;YACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC1B,CAAC;QAhDQ,aAAa;YADzB,8BAAU,EAAE;6CAKqB,8CAAe;WAJpC,aAAa,CAiDzB;QAAD,oBAAC;KAjDD,AAiDC,IAAA;IAjDY,sCAAa;;;ACP1B;;;;;;;;;;;;;ICIA;QAGI,8BAAoB,QAAyB;YAAzB,aAAQ,GAAR,QAAQ,CAAiB;YAF7C,aAAQ,GAAe,EAAE,CAAC;QAEsB,CAAC;QAEjD,mCAAI,GAAJ;YAAA,iBAOC;YANG,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAC,CAAC;gBACjC,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;gBAC/B,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;gBAE3B,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YACpC,CAAC,CAAC,CAAC;QACP,CAAC;QAZQ,oBAAoB;YADhC,8BAAU,EAAE;6CAIqB,8CAAe;WAHpC,oBAAoB,CAahC;QAAD,2BAAC;KAbD,AAaC,IAAA;IAbY,oDAAoB;;;ACJjC;;;;ICEA,SAAgB,SAAS,CAAC,MAA8B;QACpD,MAAM,CAAC,eAAe,CAAC,4BAAQ,CAAC,UAAU,CAAC,2BAA2B,CAAC,CAAC,CAAC;IAC7E,CAAC;IAFD,8BAEC;;;;;;;;;;;;;;;;;;;ICED;QAII,iCAAsB,OAAgB;YAAhB,YAAO,GAAP,OAAO,CAAS;QAEtC,CAAC;QAED,sCAAI,GAAJ;YACI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,OAAsB,CAAC;YACjD,IAAI,CAAC,IAAI,GAAG,IAAI,gBAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC7C,CAAC;QAVS;YAAT,4BAAQ;;+DAAsC;QACrC;YAAT,4BAAQ;sCAAO,gBAAM,CAAC,IAAI;6DAAC;QAFnB,uBAAuB;YAHnC,iCAAa,CAAC,aAAa,CAAC;YAC5B,8BAAU,EAAE;YACZ,8BAAU,CAAC,uBAAuB,CAAC;6CAKD,OAAO;WAJ7B,uBAAuB,CAYnC;QAAD,8BAAC;KAZD,AAYC,IAAA;IAZY,0DAAuB;;;;;;ICNpC;QAAA;QAeA,CAAC;QAdG,6CAAQ,GAAR,UAAS,KAAa;YAElB,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;YAGtC,IAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,GAAG;gBAC7B,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAE9C,OAAO,IAAI,CAAC,KAAK,CAAC,MAAI,KAAK,MAAG,CAAC,CAAC;QACpC,CAAC;QAED,2CAAM,GAAN,UAAO,KAAoB;YACvB,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACjE,CAAC;QACL,iCAAC;IAAD,CAfA,AAeC,IAAA;IAfY,gEAA0B;;;;;;ICAvC;QAAA;QAIA,CAAC;QAHG,wCAAQ,GAAR,UAAS,KAAK;YACV,OAAO,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC3B,CAAC;QACL,4BAAC;IAAD,CAJA,AAIC,IAAA;IAJY,sDAAqB;;;;;;ICAlC;QAAA;QAIA,CAAC;QAHG,mCAAM,GAAN,UAAO,KAAK;YACR,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QAC1C,CAAC;QACL,yBAAC;IAAD,CAJA,AAIC,IAAA;IAJY,gDAAkB;;;;;;;;;;;;;;;;;;;;;;;ICI/B,IAAM,SAAS,GAAG,EAAE,UAAU,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC;IAG5D;QAAoC,kCAAY;QAuB5C,wBAAY,QAAuB;YAAnC,YACI,kBAAM,EAAE,CAAC,SAGZ;YAhBO,mBAAa,GAAG,IAAI,CAAC;YACrB,cAAQ,GAAG,IAAI,CAAC;YAOhB,gBAAU,GAAG,CAAC,CAAC;YACf,mBAAa,GAAG,CAAC,CAAC;YAClB,cAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAK1B,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;;QAC7B,CAAC;QAEM,gCAAO,GAAd;YAEI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAK,IAAI,CAAC,QAAQ,CAAC,OAAO,SAAI,IAAI,CAAC,QAAQ,CAAC,UAAY,CAAC,CAAC;YAChF,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,sBAAsB,EAAE,QAAQ,CAAC,CAAC;QACrE,CAAC;QAEM,+BAAM,GAAb;YAAA,iBAgFC;YA/EG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;YAIhD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;gBACd,GAAG,EAAE,QAAQ;gBACb,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;aAC3G,CAAC,CAAC;YAEH,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;gBACd,GAAG,EAAE,MAAM;gBACX,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;aACzG,CAAC,CAAC;YAEH,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;gBACd,GAAG,EAAE,OAAO;gBACZ,SAAS,EAAE,EAAE;gBACb,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;aAC1G,CAAC,CAAC;YAEH,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;gBACd,GAAG,EAAE,OAAO;gBACZ,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;aAC1G,CAAC,CAAC;YAIH,IAAI,cAAc,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAE9C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC,CAAC;YACpF,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC,EAAE,QAAQ,EAAE,cAAc,CAAC,CAAC;YAC1G,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAE5D,IAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI;gBACxB,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;YAEjF,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;oCAIlI,CAAC;gBACN,IAAI,WAAW,GAAG,OAAK,cAAc,CAAC,CAAC,CAAC,CAAC;gBACzC,IAAI,SAAS,GAA8B,OAAK,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC;gBAEzH,OAAK,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,GAAG,EAAE,EAAE,OAAK,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;gBAEzI,SAAS,CAAC,KAAK,GAAG,WAAW,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,CAAC;gBACnD,SAAS,CAAC,OAAO,CAAC,UAAU,EAAE,OAAK,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;gBAEhE,IAAG,OAAK,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,IAAI;oBACpC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAK,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBAErF,SAAS,CAAC,cAAc,EAAE,CAAC;gBAC3B,SAAS,CAAC,EAAE,CAAC,aAAa,EAAE,UAAC,CAAC;oBAC1B,IAAI,KAAI,CAAC,aAAa,EAAE;wBAEpB,KAAI,CAAC,YAAY,CAAC,KAAK,GAAG,KAAI,CAAC,KAAK,CAAC,CAAC,GAAG,KAAI,CAAC,YAAY,CAAC,CAAC,CAAC;wBAE7D,IAAI,cAAY,GAAG,KAAI,CAAC,qBAAqB,CAAC,KAAI,CAAC,YAAY,CAAC,CAAC;wBACjE,KAAI,CAAC,UAAU,CAAC,CAAC,GAAG,cAAY,CAAC,CAAC,CAAC;wBACnC,KAAI,CAAC,UAAU,CAAC,CAAC,GAAG,cAAY,CAAC,CAAC,CAAC;wBAEnC,KAAI,CAAC,SAAS,CAAC,KAAI,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;qBAChD;gBACL,CAAC,CAAC,CAAC;;;YAxBP,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,EAAE;wBAApD,CAAC;aAyBT;YAID,IAAI,YAAY,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACjE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;YAElF,IAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ;gBACrB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;YAE5E,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,EAAE,UAAC,EAAE,EAAE,QAAQ;gBACrE,IAAI,CAAC,KAAI,CAAC,QAAQ,IAAI,QAAQ,KAAK,KAAI,CAAC,WAAW;oBAC/C,KAAI,CAAC,SAAS,CAAC,QAAqC,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,+BAAM,GAAb;YAAA,iBAgBC;YAfG,IAAI,IAAI,CAAC,aAAa,EAAE;gBACpB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACjC,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;gBAE7D,IAAI,YAAY,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBACjE,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;gBACnC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;aACtC;iBAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;gBAEvB,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,UAAA,CAAC;oBACpC,IAAI,MAAM,GAAG,CAA8B,CAAC;oBAC5C,IAAI,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;wBAClC,MAAM,CAAC,KAAK,GAAG,KAAI,CAAC,UAAU,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAA;gBACnD,CAAC,CAAC,CAAC;aACN;QACL,CAAC;QAEM,iCAAQ,GAAf;YACI,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,EAAE,GAAG,CAAC,CAAC;YAGrD,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACjC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,kBAAkB,EAAE,EAA1B,CAA0B,CAAC,CAAC;YAGpE,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC;YACxI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QAChH,CAAC;QAIM,kCAAS,GAAhB,UAAiB,OAAkC,EAAE,QAAmC;YACpF,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC;gBACtB,IAAI,EAAE,OAAO;gBACb,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI;gBACzC,QAAQ,EAAE,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI;gBAC3C,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,QAAQ;aACnC,EAAE,GAAG,CAAC,CAAC;YAER,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAI3B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YAC3C,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC;YAE5B,IAAI,CAAC,UAAU,EAAE,CAAC;YAIlB,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACtB,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,EAAE,cAAM,OAAA,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAApB,CAAoB,CAAC,CAAC;YAIvE,IAAI,kBAAkB,GAAG,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;YAC9D,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,kBAAkB,CAAC,CAAC,EAAE,kBAAkB,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAC9G,CAAC;QAEM,kCAAS,GAAhB,UAAiB,QAAmC;YAApD,iBAoEC;YAjEG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YAIrB,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAIvB,IAAI,YAAY,GAAG,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;YACvD,IAAI,CAAC,UAAU,CAAC,IAAmC,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC;YAI3F,IACI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,IAAI,IAAI,CAAC,aAAa,KAAK,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC;gBACnF,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,IAAI,IAAI,CAAC,QAAQ,CAAC,wBAAwB,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;gBACpH,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAC7E;gBACE,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAChB,OAAO;aACV;YAID,IAAI,QAAQ,KAAK,IAAI,CAAC,YAAY,EAAE;gBAChC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;aAC7B;iBAAM;gBACH,IAAI,UAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAa,CAAC;gBAExD,IAAI,CAAC,aAAa,GAAG,UAAU,CAAC;oBAC5B,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBAExB,YAAY,GAAG,KAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;oBACpD,KAAI,CAAC,UAAU,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;oBACnC,KAAI,CAAC,UAAU,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;oBAEnC,KAAI,CAAC,aAAa,GAAG,UAAU,CAAC;wBAC5B,IAAI,KAAI,CAAC,QAAQ,CAAC,WAAW,EAAE;4BAE3B,OAAM,KAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAI,CAAC,aAAa,CAAC,KAAK,KAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC;gCACjG,KAAI,CAAC,aAAa,EAAE,CAAA;4BAExB,KAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,KAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,KAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAI,CAAC,aAAa,CAAC,CAA8B,CAAC,CAAA;4BACjI,KAAI,CAAC,aAAa,EAAE,CAAC;yBACxB;6BAAM;4BACH,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC;4BAGjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAQ,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gCACvD,MAAM,IAAI,UAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;gCAEvC,IAAI,MAAM,IAAI,CAAC,EAAE;oCAEb,IAAI,CAAC,IAAI,KAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC;wCACrD,CAAC,EAAE,CAAA;oCAEP,KAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,KAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC,CAA8B,CAAC,CAAC;oCAEzF,MAAM;iCACT;6BACJ;yBACJ;oBACL,CAAC,EAAE,KAAI,CAAC,gBAAgB,CAAC,UAAQ,CAAC,UAAU,EAAE,UAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC;gBAChF,CAAC,EAAE,IAAI,CAAC,gBAAgB,CAAC,UAAQ,CAAC,UAAU,EAAE,UAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAA;aAC9E;QACL,CAAC;QAID,uCAAc,GAAd,UAAe,CAAS;YAEpB,IAAI,OAAO,GAAG,EAAE,CAAC;YAEjB,IAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC3C,OAAO,IAAI,gBAAM,CAAC,IAAI,CAAC,KAAK,CACxB,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,EACzB,OAAO,CACV,CAAC;aACL;YAED,OAAO,IAAI,gBAAM,CAAC,IAAI,CAAC,KAAK,CAExB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,OAAO,EAEpG,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC;gBACrD,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC;gBAC5B,CAAC,CAAC,OAAO,CAChB,CAAC;QACN,CAAC;QAED,0CAAiB,GAAjB;YACI,IAAI,OAAO,GAAG,EAAE,CAAC;YAEjB,OAAO,IAAI,gBAAM,CAAC,IAAI,CAAC,KAAK,CACxB,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,EACzB,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,OAAO,CACnC,CAAC;QACN,CAAC;QAED,8CAAqB,GAArB,UAAsB,MAAiC;YACnD,OAAO,IAAI,gBAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;QACtF,CAAC;QAED,8CAAqB,GAArB,UAAsB,MAAiC;YACnD,OAAO,IAAI,gBAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;QACtF,CAAC;QAED,yCAAgB,GAAhB,UAAiB,KAAa,EAAE,QAAgB;YAC5C,OAAO,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,QAAQ,CAAC;QAC5C,CAAC;QACL,qBAAC;IAAD,CAlSA,AAkSC,CAlSmC,gBAAM,CAAC,KAAK,GAkS/C;IAlSY,wCAAc","file":"app-bundle.js","sourcesContent":["import { RouterConfiguration, Router } from 'aurelia-router';\n\nexport class App {\n    router: Router;\n\n    configureRouter(config: RouterConfiguration, router: Router): void {\n        this.router = router;\n\n        config.title = 'Cyberball';\n\n        config.map([\n            { route: ['', 'home'], name: 'home', moduleId: 'pages/home' },\n            { route: 'game', name: 'game', moduleId: 'pages/game' },\n            { route: 'message-test', name: 'message-test', moduleId: 'pages/message-test' }\n        ]);\n    }\n}\n","<template>\n    <router-view></router-view>\n</template>\n","export default {\n  debug: true,\n  testing: true\n};\n","export function getCaughtBallPosition(player: Phaser.GameObjects.Sprite) {\n    return { x: player.x + (player.flipX ? -50 : 50), y: player.y - 15 };\n}\n\nexport function getActiveBallPosition(player: Phaser.GameObjects.Sprite) {\n    return { x: player.x + (player.flipX ? 40 : -40), y: player.y - 20 };\n}\n","import {Aurelia} from 'aurelia-framework'\nimport environment from './environment';\n\nexport function configure(aurelia: Aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  aurelia.use.developmentLogging(environment.debug ? 'debug' : 'warn');\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","export class BanterModel {\n    chance: number;\n    delay: number;\n    delayVariance: number;\n    messages: Array<string>;\n}\n","import { BanterModel } from './banter-model';\nimport { PlayerModel } from './player-model';\n\nexport class CPUModel extends PlayerModel {\n    // A set of weights for each possible target, adding up to 100%.\n    targetPreference: Array<number> = [50, 50];\n\n    throwDelay: number = 500;\n    throwDelayVariance: number = 200;\n\n    catchDelay: number = 500;\n    catchDelayVariance: number = 200;\n\n    introductionBanter?: BanterModel;\n    throwBanter?: BanterModel\n    catchBanter?: BanterModel\n    leftOutBanter?: BanterModel\n\n    boredomBanterThreshold?: number;\n    boredomBanter?: BanterModel;\n\n    constructor(init?: Partial<CPUModel>) {\n        super();\n\n        Object.assign(this, init);\n    }\n}\n","export class PlayerModel {\n    name: string;\n    tint?: string;\n}\n","import { PlayerModel } from './player-model';\nimport { CPUModel } from './cpu-model';\n\nexport class SettingsModel {\n    player: PlayerModel = new PlayerModel();\n    computerPlayers: Array<CPUModel>;\n\n    // Gameplay\n    throwCount: number = 10;\n    ballSpeed: number = 500;\n\n    useSchedule: boolean = false;\n    scheduleHonorsThrowCount: boolean = false;\n    schedule: Array<number> = [\n        1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0\n    ];\n\n    // Graphics\n    baseUrl: string = './assets';\n    ballSprite: string = 'ball.png';\n    ballTint?: string;\n\n    // Misc\n    chatEnabled: boolean = false;\n\n    constructor(init?: Partial<SettingsModel>) {\n        Object.assign(this, init);\n    }\n}\n\nexport const defaultSettings = new SettingsModel({\n    player: {\n       name: 'Player 1'\n    },\n    computerPlayers: [\n        new CPUModel({\n            name: 'Player 2'\n        }),\n        new CPUModel({\n            name: 'Player 3'\n        })\n    ]\n});\n","import { CyberballScene } from './../scenes/cyberball';\nimport { defaultSettings, SettingsModel } from './../models/settings-model';\nimport Phaser from 'phaser';\n\n//     // TODO: Use events to talk to Qualtrics?\n//     //setTimeout(() => { window.dispatchEvent(new CustomEvent('complete', { detail: { test: 'test' } }))}, 1000)\n\n\nexport class GameViewModel {\n    settings: SettingsModel = defaultSettings;\n\n    // Game:\n\n    gameWidth = 800;\n    gameHeight = 460;\n\n    gameConfig: Phaser.Types.Core.GameConfig;\n\n    activate(params) {\n        if('settings' in params) {\n            this.settings = new SettingsModel(JSON.parse(atob(params.settings)));\n        }\n\n        if('playerName' in params) {\n            this.settings.player.name = params.playerName;\n        }\n    }\n\n    bind() {\n        this.gameConfig  = {\n            type: Phaser.AUTO,\n            width: this.gameWidth,\n            height: this.gameHeight,\n            scene: new CyberballScene(this.settings),\n            physics: {\n                default: 'arcade'\n            }\n        };\n    }\n\n    // Chat:\n\n    chatMessage: string;\n    chatMessages: Array<{sender: string, text: string}> = [];\n\n    sendMessage() {\n        this.chatMessages.push({\n            sender: this.settings.player.name,\n            text: this.chatMessage\n        });\n\n        this.chatMessage = '';\n    }\n}\n","canvas {\n    max-width: 100%;\n}\n\n.chat-log {\n    border: 1px solid black;\n    border-bottom: 0;\n    height: 100px;\n    overflow-y: auto;\n}\n\n.chat-input {\n    display: flex;\n}\n\n.chat-input input {\n    flex: 1;\n}\n","<template>\n    <require from=\"./game.css\"></require>\n\n    <phaser-game config.bind=\"gameConfig\"></phaser-game>\n\n    <div if.bind=\"settings.chatEnabled\" class=\"chat\" css=\"width: ${gameWidth}px\">\n        <div class=\"chat-log\">\n            <div repeat.for=\"message of chatMessages\">\n                <strong>${message.sender}</strong>: <span>${message.text}</span>\n            </div>\n        </div>\n\n        <form class=\"chat-input\" submit.delegate=\"sendMessage()\">\n            <input value.bind=\"chatMessage\" />\n            <button type=\"submit\">Send</button>\n        </form>\n    </div>\n</template>\n","import {BindingSignaler} from 'aurelia-templating-resources';\nimport {autoinject} from 'aurelia-framework';\nimport { SettingsModel, defaultSettings } from \"models/settings-model\";\nimport { CPUModel } from 'models/cpu-model';\nimport ClipboardJS from 'clipboard';\n\n@autoinject()\nexport class HomeViewModel {\n    settings: SettingsModel = defaultSettings;\n    clipboard: ClipboardJS;\n\n    constructor(private signaler: BindingSignaler) {}\n\n    bind() {\n        this.clipboard = new ClipboardJS('#copy');\n    }\n\n    unbind() {\n        this.clipboard.destroy();\n    }\n\n    addCPU() {\n        this.settings.computerPlayers.push(new CPUModel({\n            name: `Player ${this.settings.computerPlayers.length + 2}`\n        }));\n\n        this.settings.computerPlayers.forEach(cpu => {\n            while(cpu.targetPreference.length != this.settings.computerPlayers.length)\n                cpu.targetPreference.push(0);\n        });\n    }\n\n    removeCPU() {\n        this.settings.computerPlayers.pop();\n\n        this.settings.computerPlayers.forEach(cpu => {\n            cpu.targetPreference.pop();\n        });\n    }\n\n    saveSettings() {\n        this.signaler.signal('save-settings');\n    }\n\n    get url() {\n        let url = document.location.origin + document.location.pathname;\n\n        url += '#game?settings=';\n        url += btoa(JSON.stringify(this.settings));\n\n        return url;\n    }\n\n    testGame() {\n        window.open(this.url);\n    }\n}\n","<template>\n    <require from=\"resources/value-converters/json-value-converter\"></require>\n    <require from=\"resources/value-converters/integer-value-converter\"></require>\n    <require from=\"resources/value-converters/integer-array-value-converter\"></require>\n\n    <style>\n        body {\n            background: #111;\n            color: #eee;\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n\n        .input {\n            display: flex;\n            margin-bottom: 5px;\n        }\n\n        .input label {\n            width: 180px;\n        }\n\n        .input label + * {\n            box-sizing: border-box;\n            max-width: 300px;\n        }\n\n        .input input[type=text], .input input[type=number], textarea {\n            flex: 1 1 100%;\n            min-width: 0;\n            width: auto;\n        }\n\n        .input > div {\n            display: flex;\n        }\n\n        pre {\n            max-width: 100%;\n            overflow-x: auto;\n        }\n    </style>\n\n    <div style=\"display: flex;\">\n        <div style=\"margin-right: 20px;\">\n            <h1>Cyberball Configuration Builder</h1>\n\n            <h2>Player</h2>\n\n            <div class=\"input\">\n                <label for=\"player.name\">Name</label>\n                <input type=\"text\" value.bind=\"settings.player.name\" />\n            </div>\n\n            <div class=\"input\">\n                <label for=\"player.tint\">Tint Color</label>\n                <input type=\"color\" value.bind=\"settings.player.tint\" />\n            </div>\n\n            <h2>\n                CPUs\n                <button click.delegate=\"addCPU()\">+ Add CPU</button>\n                <button click.delegate=\"removeCPU()\">- Remove CPU</button>\n            </h2>\n\n            <div repeat.for=\"cpu of settings.computerPlayers\">\n                <div class=\"input\">\n                    <label>Name</label>\n                    <input type=\"text\" value.bind=\"cpu.name\" />\n                </div>\n\n                <div class=\"input\">\n                    <label>Tint Color</label>\n                    <input type=\"color\" value.bind=\"cpu.tint\" />\n                </div>\n\n                <div class=\"input\">\n                    <label>Throw Delay</label>\n                    <input type=\"number\" value.bind=\"cpu.throwDelay | integer\" />\n                </div>\n\n                <div class=\"input\">\n                    <label>Throw Delay Variance</label>\n                    <input type=\"number\" value.bind=\"cpu.throwDelayVariance | integer\" />\n                </div>\n\n                <div class=\"input\">\n                    <label>Catch Delay</label>\n                    <input type=\"number\" value.bind=\"cpu.catchDelay | integer\" />\n                </div>\n\n                <div class=\"input\">\n                    <label>Catch Delay Variance</label>\n                    <input type=\"number\" value.bind=\"cpu.catchDelayVariance | integer\" />\n                </div>\n\n\n                <div class=\"input\">\n                    <label>Target Preference</label>\n\n                    <div>\n                        <input repeat.for=\"target of cpu.targetPreference\" type=\"number\" value.bind=\"cpu.targetPreference[$index] | integer\" />\n                    </div>\n                </div>\n\n                <hr />\n            </div>\n\n            <h2>Gameplay</h2>\n\n            <div class=\"input\">\n                <label>Throw Count</label>\n                <input type=\"number\" value.bind=\"settings.throwCount | integer\" />\n            </div>\n\n            <div class=\"input\">\n                <label>Ball Speed</label>\n                <input type=\"number\" value.bind=\"settings.ballSpeed | integer\" />\n            </div>\n\n            <div class=\"input\">\n                <label for=\"ball.tint\">Ball Tint Color</label>\n                <input type=\"color\" value.bind=\"settings.ballTint\" />\n            </div>\n\n            <div class=\"input\">\n                <label>Use Schedule</label>\n                <input type=\"checkbox\" checked.bind=\"settings.useSchedule\" />\n            </div>\n\n            <div class=\"input\" if.bind=\"settings.useSchedule\">\n                <label>Schedule</label>\n                <textarea value.bind=\"settings.schedule | integerArray & updateTrigger:'blur'\"></textarea>\n            </div>\n\n            <div class=\"input\">\n                <label>Schedule Honors Throw Count</label>\n                <input type=\"checkbox\" checked.bind=\"settings.scheduleHonorsThrowCount\" />\n            </div>\n\n            <button click.delegate=\"saveSettings()\">Save</button>\n        </div>\n\n        <div style=\"overflow-y: auto;\">\n            <pre>${settings | json & signal: 'save-settings'}</pre>\n        </div>\n    </div>\n\n    <div>\n        <h1>\n            Code\n            <button id=\"copy\" data-clipboard-target=\"#code\">&#10697; Copy</button>\n            <button click.delegate=\"testGame()\">&#129514; Test</button>\n        </h1>\n        <pre id=\"code\">&lt;iframe id=\"cyberball\" width=\"100%\" height=\"580\" src=\"${url}\"&gt;&lt;/iframe&gt;</pre>\n    </div>\n</template>\n","import {BindingSignaler} from 'aurelia-templating-resources';\nimport {autoinject} from 'aurelia-framework';\n\n@autoinject()\nexport class MessageTestViewModel {\n    messages: Array<any> = [];\n\n    constructor(private signaler: BindingSignaler) {}\n\n    bind() {\n        window.addEventListener('message', (e) => {\n            console.log('message', e.data);\n            this.messages.push(e.data);\n\n            this.signaler.signal('message');\n        });\n    }\n}\n","<template>\n    <require from=\"resources/value-converters/json-value-converter\"></require>\n\n    <iframe src=\"/#game\" width=\"800\" height=\"600\"></iframe>\n    <div style=\"border: 1px solid black; width: 800px; height: 200px; overflow-y: auto;\">\n        <div repeat.for=\"message of messages\">${message | json & signal: 'message'}</div>\n    </div>\n</template>\n","import { FrameworkConfiguration, PLATFORM } from 'aurelia-framework';\n\nexport function configure(config: FrameworkConfiguration) {\n    config.globalResources(PLATFORM.moduleName('./phaser-game/phaser-game'));\n}\n","import { customElement, bindable, autoinject, inlineView } from \"aurelia-framework\";\nimport Phaser from 'phaser';\n\n@customElement('phaser-game')\n@autoinject()\n@inlineView('<template></template>')\nexport class PhaserGameCustomElement {\n    @bindable config: Phaser.Types.Core.GameConfig;\n    @bindable game: Phaser.Game;\n\n    constructor(protected element: Element) {\n\n    }\n\n    bind() {\n        this.config.parent = this.element as HTMLElement;\n        this.game = new Phaser.Game(this.config);\n    }\n}\n","export class IntegerArrayValueConverter {\n    fromView(value: string) {\n        // Remove anything but numbers and commas.\n        value = value.replace(/[^0-9,]/g, '');\n\n        // Remove any trailing comma.\n        if(value[value.length - 1] == ',')\n            value = value.substr(0, value.length - 1);\n\n        return JSON.parse(`[${value}]`);\n    }\n\n    toView(value: Array<number>) {\n        return JSON.stringify(value).substr(1, value.length * 2 - 1);\n    }\n}\n","export class IntegerValueConverter {\n    fromView(value) {\n        return parseInt(value);\n    }\n}\n","export class JsonValueConverter {\n    toView(value) {\n        return JSON.stringify(value, null, 2);\n    }\n}\n","import { SettingsModel } from './../models/settings-model';\nimport Phaser from 'phaser';\nimport { CPUModel } from 'models/cpu-model';\n\nconst textStyle = { fontFamily: 'Arial', color: '#000000' };\n\n\nexport class CyberballScene extends Phaser.Scene {\n    private settings: SettingsModel;\n\n    // Game Objects:\n\n    private ballSprite: Phaser.GameObjects.Sprite;\n    private playerSprite: Phaser.GameObjects.Sprite;\n    private playerGroup: Phaser.Physics.Arcade.Group;\n\n    // Gameplay Mechanics:\n\n    private playerHasBall = true;\n    private ballHeld = true;\n    private throwTarget: Phaser.GameObjects.Sprite;\n\n    private activeTimeout;\n\n    // Stats:\n\n    private throwCount = 0;\n    private scheduleIndex = 0;\n    private lastTime = Date.now();\n\n    constructor(settings: SettingsModel) {\n        super({});\n\n        this.settings = settings;\n    }\n\n    public preload() {\n        // TODO: Load from settings.\n        this.load.image('ball', `${this.settings.baseUrl}/${this.settings.ballSprite}`);\n        this.load.multiatlas('player', `./assets/player.json`, 'assets');\n    }\n\n    public create() {\n        this.cameras.main.setBackgroundColor('#ffffff');\n\n        // Animations:\n\n        this.anims.create({\n            key: 'active',\n            frames: this.anims.generateFrameNames('player', { start: 1, end: 1, prefix: 'active/', suffix: '.png' })\n        });\n\n        this.anims.create({\n            key: 'idle',\n            frames: this.anims.generateFrameNames('player', { start: 1, end: 1, prefix: 'idle/', suffix: '.png' })\n        });\n\n        this.anims.create({\n            key: 'throw',\n            frameRate: 12,\n            frames: this.anims.generateFrameNames('player', { start: 1, end: 3, prefix: 'throw/', suffix: '.png' })\n        });\n\n        this.anims.create({\n            key: 'catch',\n            frames: this.anims.generateFrameNames('player', { start: 1, end: 1, prefix: 'catch/', suffix: '.png' })\n        });\n\n        // Player:\n\n        let playerPosition = this.getPlayerPosition();\n\n        this.playerGroup = this.physics.add.group({ immovable: true, allowGravity: false });\n        this.playerSprite = this.playerGroup.create(playerPosition.x, playerPosition.y, 'player', 'active/1.png');\n        this.playerSprite.setData('settings', this.settings.player);\n\n        if(this.settings.player.tint)\n            this.playerSprite.setTint(parseInt(this.settings.player.tint.substr(1), 16));\n\n        this.add.text(playerPosition.x, playerPosition.y + this.playerSprite.height / 2 + 10, this.settings.player.name, textStyle).setOrigin(0.5);\n\n        // CPU:\n\n        for (let i = 0; i < this.settings.computerPlayers.length; i++) {\n            let cpuPosition = this.getCPUPosition(i);\n            let cpuSprite: Phaser.GameObjects.Sprite = this.playerGroup.create(cpuPosition.x, cpuPosition.y, 'player', 'idle/1.png');\n\n            this.add.text(cpuPosition.x, cpuPosition.y + cpuSprite.height / 2 + 10, this.settings.computerPlayers[i].name, textStyle).setOrigin(0.5);\n\n            cpuSprite.flipX = cpuPosition.x > playerPosition.x;\n            cpuSprite.setData('settings', this.settings.computerPlayers[i]);\n\n            if(this.settings.computerPlayers[i].tint)\n                cpuSprite.setTint(parseInt(this.settings.computerPlayers[i].tint.substr(1), 16));\n\n            cpuSprite.setInteractive();\n            cpuSprite.on('pointerdown', (e) => {\n                if (this.playerHasBall) {\n                    // Ensure player and ball are facing the correct way on touch devices:\n                    this.playerSprite.flipX = this.input.x < this.playerSprite.x;\n\n                    let ballPosition = this.getActiveBallPosition(this.playerSprite);\n                    this.ballSprite.x = ballPosition.x;\n                    this.ballSprite.y = ballPosition.y;\n\n                    this.throwBall(this.playerSprite, cpuSprite);\n                }\n            });\n        }\n\n        // Ball:\n\n        let ballPosition = this.getActiveBallPosition(this.playerSprite);\n        this.ballSprite = this.physics.add.sprite(ballPosition.x, ballPosition.y, 'ball');\n\n        if(this.settings.ballTint)\n            this.ballSprite.setTint(parseInt(this.settings.ballTint.substr(1), 16));\n\n        this.physics.add.overlap(this.ballSprite, this.playerGroup, (_b, receiver) => {\n            if (!this.ballHeld && receiver === this.throwTarget)\n                this.catchBall(receiver as Phaser.GameObjects.Sprite);\n        });\n    }\n\n    public update() {\n        if (this.playerHasBall) {\n            this.playerSprite.play('active');\n            this.playerSprite.flipX = this.input.x < this.playerSprite.x;\n\n            let ballPosition = this.getActiveBallPosition(this.playerSprite);\n            this.ballSprite.x = ballPosition.x;\n            this.ballSprite.y = ballPosition.y;\n        } else if (!this.ballHeld) {\n            // Eyes on the ball:\n            this.playerGroup.getChildren().forEach(c => {\n                let sprite = c as Phaser.GameObjects.Sprite;\n                if (sprite.frame.name.includes('idle'))\n                    sprite.flipX = this.ballSprite.x < sprite.x\n            });\n        }\n    }\n\n    public gameOver() {\n        window.parent.postMessage({ type: 'game-end' }, '*');\n\n        // Stop future throws:\n        clearTimeout(this.activeTimeout);\n        this.playerGroup.children.each(child => child.removeAllListeners());\n\n        // Draw game over screen:\n        this.add.rectangle(this.sys.canvas.width / 2, this.sys.canvas.height / 2, this.sys.canvas.width, this.sys.canvas.height, 0xdddddd, 0.5);\n        this.add.text(this.sys.canvas.width / 2, this.sys.canvas.height / 2, 'Game Over', textStyle).setOrigin(0.5);\n    }\n\n    // Mechanics:\n\n    public throwBall(thrower: Phaser.GameObjects.Sprite, receiver: Phaser.GameObjects.Sprite) {\n        window.parent.postMessage({\n            type: 'throw',\n            thrower: thrower.getData('settings').name,\n            receiver: receiver.getData('settings').name,\n            wait: Date.now() - this.lastTime\n        }, '*');\n\n        this.lastTime = Date.now();\n\n        // Update trackers:\n\n        this.playerHasBall = this.ballHeld = false;\n        this.throwTarget = receiver;\n\n        this.throwCount++;\n\n        // Player animation:\n\n        thrower.play('throw');\n        thrower.anims.currentAnim.once('complete', () => thrower.play('idle'));\n\n        // Ball physics:\n\n        let ballTargetPosition = this.getCaughtBallPosition(receiver);\n        this.physics.moveTo(this.ballSprite, ballTargetPosition.x, ballTargetPosition.y, this.settings.ballSpeed);\n    }\n\n    public catchBall(receiver: Phaser.GameObjects.Sprite) {\n        // Update trackers:\n\n        this.ballHeld = true;\n\n        // Player animation:\n\n        receiver.play('catch');\n\n        // Ball physics:\n\n        let ballPosition = this.getCaughtBallPosition(receiver);\n        (this.ballSprite.body as Phaser.Physics.Arcade.Body).reset(ballPosition.x, ballPosition.y);\n\n        // The game ends at the end of the schedule or when reaching the throw count.\n\n        if (\n            (this.settings.useSchedule && this.scheduleIndex === this.settings.schedule.length) ||\n            (this.settings.useSchedule && this.settings.scheduleHonorsThrowCount && this.throwCount >= this.settings.throwCount) ||\n            (!this.settings.useSchedule && this.throwCount >= this.settings.throwCount)\n        ) {\n            this.gameOver();\n            return;\n        }\n\n        // Prepare for next throw:\n\n        if (receiver === this.playerSprite) {\n            this.playerHasBall = true;\n        } else {\n            let settings = receiver.getData('settings') as CPUModel;\n\n            this.activeTimeout = setTimeout(() => {\n                receiver.play('active');\n\n                ballPosition = this.getActiveBallPosition(receiver);\n                this.ballSprite.x = ballPosition.x;\n                this.ballSprite.y = ballPosition.y;\n\n                this.activeTimeout = setTimeout(() => {\n                    if (this.settings.useSchedule) {\n                        // Skip self in schedule.\n                        while(this.settings.schedule[this.scheduleIndex] === this.playerGroup.getChildren().indexOf(receiver))\n                            this.scheduleIndex++\n\n                        this.throwBall(receiver, this.playerGroup.getChildren()[this.settings.schedule[this.scheduleIndex]] as Phaser.GameObjects.Sprite)\n                        this.scheduleIndex++;\n                    } else {\n                        let random = Math.random() * 100;\n\n                        // A psuedo-random target is selected by subtracting the target preference chance from the random number until 0 is reached\n                        for (var i = 0; i < settings.targetPreference.length; i++) {\n                            random -= settings.targetPreference[i];\n\n                            if (random <= 0) {\n                                // Exclude self\n                                if (i >= this.playerGroup.getChildren().indexOf(receiver))\n                                    i++\n\n                                this.throwBall(receiver, this.playerGroup.getChildren()[i] as Phaser.GameObjects.Sprite);\n\n                                break;\n                            }\n                        }\n                    }\n                }, this.calculateTimeout(settings.throwDelay, settings.throwDelayVariance));\n            }, this.calculateTimeout(settings.catchDelay, settings.catchDelayVariance))\n        }\n    }\n\n    // Helpers:\n\n    getCPUPosition(i: number) {\n        // TODO: Increase padding when portaits are enabled.\n        let padding = 75;\n\n        if(this.settings.computerPlayers.length === 1) {\n            return new Phaser.Geom.Point(\n                this.sys.canvas.width / 2,\n                padding\n            );\n        }\n\n        return new Phaser.Geom.Point(\n            // Evenly divide the width of the screen by the number of players.\n            ((this.sys.canvas.width - (padding * 2)) / (this.settings.computerPlayers.length - 1)) * i + padding,\n            // First and last player are closer in the middle, others stand along the edge.\n            i === 0 || i === this.settings.computerPlayers.length - 1\n                ? this.sys.canvas.height / 2\n                : padding\n        );\n    }\n\n    getPlayerPosition() {\n        let padding = 75;\n\n        return new Phaser.Geom.Point(\n            this.sys.canvas.width / 2,\n            this.sys.canvas.height - padding\n        );\n    }\n\n    getCaughtBallPosition(target: Phaser.GameObjects.Sprite) {\n        return new Phaser.Geom.Point(target.x + (target.flipX ? -50 : 50), target.y - 15);\n    }\n\n    getActiveBallPosition(target: Phaser.GameObjects.Sprite) {\n        return new Phaser.Geom.Point(target.x + (target.flipX ? 40 : -40), target.y - 20);\n    }\n\n    calculateTimeout(delay: number, variance: number) {\n        return delay + Math.random() * variance;\n    }\n}\n"]}